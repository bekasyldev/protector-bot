from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import asyncio
from config import BOT_TOKEN, ADMIN_IDS
from database import get_daily_statistics

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class AddUser(StatesGroup):
    waiting_for_id = State()

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
        ],
        resize_keyboard=True
    )
    return keyboard

async def load_client_ids():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('client_id.txt', 'r') as file:
            return [int(line.strip()) for line in file if line.strip()]
    except FileNotFoundError:
        return []

async def save_client_id(user_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª"""
    with open('client_id.txt', 'a') as file:
        file.write(f"{user_id}\n")

@dp.message(Command("start"))
async def cmd_start(message: Message):
    if message.from_user.id == ADMIN_IDS:
        await message.answer(
            "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def add_user_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id != ADMIN_IDS:
        return
    
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddUser.waiting_for_id)

@dp.message(AddUser.waiting_for_id)
async def add_user_finish(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id != ADMIN_IDS:
        return

    try:
        user_id = int(message.text.strip())
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        current_clients = await load_client_ids()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id in current_clients:
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π!",
                reply_markup=get_admin_keyboard()
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            await save_client_id(user_id)
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π!",
                reply_markup=get_admin_keyboard()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    user_id,
                    "–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–π."
                )
            except Exception as e:
                await message.answer(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {str(e)}",
                    reply_markup=get_admin_keyboard()
                )
    
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞! ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

async def send_daily_report():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    statistics = await get_daily_statistics()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    recipient_ids = [ADMIN_IDS] + await load_client_ids()
    
    for user_id in recipient_ids:
        report_message = "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —ç–º–æ—Ü–∏—è–º\n\n"
        
        for institution in statistics:
            report_message += f"üè¢ –í —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏ {institution['name']} –∑–∞ {institution['date']}:\n"
            report_message += f"üìå –í—Å–µ–≥–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {institution['total_emotions']} —ç–º–æ—Ü–∏–π\n"
            report_message += f"üë• –ò–∑ –Ω–∏—Ö –≤ –±–∞–∑–µ: {institution['registered_emotions']} —ç–º–æ—Ü–∏–π\n\n"
            
            for emotion, count in institution['emotions_breakdown'].items():
                emoji = get_emotion_emoji(emotion)
                report_message += f"{emoji} {emotion}: {count}\n"
            
            report_message += "\n" + "‚îÄ" * 30 + "\n\n"
        
        try:
            await bot.send_message(user_id, report_message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def get_emotion_emoji(emotion: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —ç–º–æ—Ü–∏–∏"""
    emoji_map = {
        "happy": "üòä",
        "neutral": "üòê",
        "angry": "üò†",
        "sad": "üò¢"
    }
    return emoji_map.get(emotion.lower(), "‚ùì")

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler(timezone="Asia/Almaty")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 9:00)
    scheduler.add_job(send_daily_report, 'cron', hour=9, minute=0)
    
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 